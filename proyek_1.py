# -*- coding: utf-8 -*-
"""proyek_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n2-E0ZlyehzdDQ3OLt-q2O9TpRzJNzsx

# **Proyek 1 Predictive Analytics**

## **Data Preparation**

Import seluruh library yang dibutuhkan
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense

"""Tarik dataset StudentPerformance.csv ke direktory google collab lalu gunakan pandas untuk mengubahnya menjadi dataframe.
Info dataset ditampilkan sebagai berikut.
"""

df = pd.read_csv('/content/StudentsPerformance.csv')
df.info()

"""Menampilkan kategori apa saja yang terdapat dalam kolom-kolom non numerik value"""

df

df['gender'].value_counts().plot.pie()

df['race/ethnicity'].value_counts().plot.pie()

df['parental level of education'].value_counts().plot.pie()

df['lunch'].value_counts().plot.pie()

df['test preparation course'].value_counts().plot.pie()

import seaborn as sns
sns.boxplot(df['math score'])

df['math score'].value_counts().sort_index().plot()

df['reading score'].value_counts().sort_index().plot()

sns.boxplot(df['reading score'])

df['writing score'].value_counts().sort_index().plot()

sns.boxplot(df['writing score'])

Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR=Q3-Q1
df=df[~((df<(Q1-1.5*IQR))|(df>(Q3+1.5*IQR))).any(axis=1)]
 
# Cek ukuran dataset setelah kita drop outliers
df.shape

df.info()

for i in df.columns[0:5]:
  print(i)
  print(set(df[i]))

"""Memeriksa adakah value yang bernilai 'nol'. Karena terdeteksi nilai nol terdapat pada kolom m*ath score* yang memang berupa numerik value, maka nilai nol tidak akan menjadi gangguan."""

print((df[::] == 0).sum())
df.describe()

"""Lakukan proses One Hot Encoder yang akan mengubah data non-numerik menjadi data nnumerik bernilai biner untuk setiap kategori valuenya. Kemudian pisahkan mana yang akan menjadi atribut dan target pada training model nantinya."""

gender = pd.get_dummies(df['gender'])
etnis = pd.get_dummies(df['race/ethnicity'])
parent = pd.get_dummies(df['parental level of education'])
lunch = pd.get_dummies(df['lunch'])
prep = pd.get_dummies(df['test preparation course'])

df = pd.concat([df, gender, etnis, parent, lunch, prep], axis=1)

df = df.drop(['gender', 'race/ethnicity', 'parental level of education', 'lunch', 'test preparation course'], axis=1)

atribut = df.copy()
atribut = atribut.drop(['math score', 'reading score', 'writing score'], axis=1)

nilai_rata = (df['math score'] + df['reading score'] + df['writing score'])/3
target = nilai_rata.astype('int')
atribut = atribut

"""Nilai rata-rata ketiga test siswa yang telah diperoleh sebelumnya diubah kembali menjadi lima prediket dari A sampai E."""

from re import A
nil = []
for i in target:
  #print(i)
  if i >= 90:
    nil.append('A')
  elif i >80 and i <89:
    nil.append('B')
  elif i >70 and i < 79:
    nil.append('C')
  elif i > 60 and i < 69:
    nil.append('D')
  else:
    nil.append('E')
print(nil)

"""Nilai yang telah berupa prediket tadi diubah lagi menjadi data frame supaya bisa dilakukan proses one hot encoder dan menghasilak seperti berikut."""

lin = pd.DataFrame(nil, columns=['nilai'],)
nilai = pd.get_dummies(lin['nilai'])
print(nilai)

"""Bagi data menjadi data training dan data test."""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(atribut, nilai, test_size=0.2, random_state=42)

"""## **Modelling**

Model berupa neural network empat layer dengan 17 input dan 5 output. Optimizer yang digunakan *sgd* dan metrik *accuracy*
"""

model = Sequential([    
                    Dense(17, activation='relu', input_shape=(17,)),    
                    Dense(13, activation='relu'),
                    Dense(9, activation='relu'),    
                    Dense(5, activation='softmax'),])

model.compile(optimizer='sgd', loss='mean_squared_error', metrics=['accuracy'])

"""Proses training dengan data train dan validation menggunakan data test."""

history = model.fit(x_train, y_train, epochs=100, batch_size=64, validation_data=(x_test, y_test))

"""Menampilkan accuracy dan val_accuracy secara visual"""

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Accuracy | Loss')
plt.ylabel('accuracy | loss')
plt.xlabel('epoch')
plt.legend(['train_Accuracy', 'test_Accuracy', 'train_loss', 'test_loss'], loc='upper left')
plt.show()